/**
 * 
 */
package oqube.patchwork.report;

import java.util.Map;

/**
 * An interface for receiving events generated by {@link Coverage}
 * class.
 * This interface is implemented by objects interested in receiving 
 * execution events from coverage instrumented classes.
 * 
 * @author nono
 *
 */
public interface CoverageListener {


  /**
   * Batch update this coverage objective given a code paths map. This method
   * updates this coverage objective with a whole set of paths.
   * 
   * @param codepaths
   *          a Map<String, <List <int[]>>> instance representing paths of
   *          execution taken for a set of methods. Key is the fully qualified
   *          method name and value is the list of paths (block number
   *          sequences) covered.
   */
  void update(Map codepaths);

  /**
   * Online update of this coverage objective. This method is called to
   * represent a single coverage event. It is then to the objective to updates 
   * its internal information according to the given event.
   * 
   * @param tid an identifier for thread. Unique within a given analysis session.
   * @param method the method called.
   * @param block the block number within method.
   */
  void update(int tid, String method, int block);
  
  /**
   * Returns the number of times this objective has been hit.
   * 
   * @return a count of {@link #update(int, String, int)} methods 
   * invocation.
   */
  int hit();
  

}
